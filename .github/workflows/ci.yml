name: ci

on:
  #  pull_request:
  push:
    branches:
      - test-ci

jobs:
  #  format:
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      - name: Set up Flutter
  #        uses: subosito/flutter-action@v2
  #        with:
  #          flutter-version: '3.24.3'
  #
  #      - name: Ensure Flutter dependencies
  #        run: flutter pub get
  #
  #      - name: Check code format
  #        # Check for formatting issues and list any files needing formatting
  #        run: |
  #          set +e
  #          FORMAT_OUTPUT=$(dart format --set-exit-if-changed . 2>&1)
  #          FORMAT_EXIT=$?
  #          set -e
  #
  #          if [ $FORMAT_EXIT -ne 0 ]; then
  #            echo "Code format issues detected in the following files:"
  #            echo "$FORMAT_OUTPUT" | awk '/Formatted/ {sub(/^Formatted /, ""); print $0}'
  #            echo "Please format these files by running 'dart format .' locally."
  #            exit 1
  #          fi
  #
  #  unit_test:
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      - name: Set up Flutter
  #        uses: subosito/flutter-action@v2
  #        with:
  #          flutter-version: '3.24.3'
  #
  #      - name: Ensure Flutter dependencies
  #        run: flutter pub get
  #
  #      - name: Run unit tests
  #        run: flutter test

  #   ios_integration_test:
  #    runs-on: macos-latest
  #
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      - name: Set up Flutter
  #        uses: subosito/flutter-action@v2
  #        with:
  #          flutter-version: 'latest'
  #
  #      - name: Ensure Flutter dependencies
  #        run: flutter pub get
  #
  #      - name: Start iOS Simulator
  #        run: |
  #          xcrun simctl boot "iPhone 14" || echo "Simulator already started."
  #
  #      - name: Run Flutter iOS integration tests
  #        run: flutter drive --target=example/integration_test/

  android_integration_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [33]
        target: [default]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Make run_tests.sh executable
        run: chmod +x ./.github/workflows/run_tests.sh

      - name: Run UI test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./.github/workflows/run_tests.sh

#      - name: Kill crashpad_handler processes
#        if: always()
#        run: |
#          pkill -SIGTERM crashpad_handler || true
#          sleep 5
#          pkill -SIGKILL crashpad_handler || true
